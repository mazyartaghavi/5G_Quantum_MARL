import numpy as np
import gym
from gym import spaces

class UAV5GEnv(gym.Env):
    """
    Custom Environment for Multi-Agent 5G UAV Deployment under Partial Observability
    """

    def __init__(self, num_agents=10, grid_size=20):
        super(UAV5GEnv, self).__init__()
        self.num_agents = num_agents
        self.grid_size = grid_size
        self.observation_range = 3  # partial observability radius
        self.action_space = spaces.Discrete(5)  # [stay, up, down, left, right]

        # Each agent observes a local grid
        obs_shape = (self.observation_range * 2 + 1, self.observation_range * 2 + 1)
        self.observation_space = spaces.Box(low=0, high=1, shape=obs_shape, dtype=np.float32)

        self.agent_positions = np.zeros((self.num_agents, 2), dtype=int)
        self.signal_coverage = np.zeros((grid_size, grid_size), dtype=np.float32)

    def reset(self):
        self.signal_coverage.fill(0)
        self.agent_positions = np.random.randint(0, self.grid_size, (self.num_agents, 2))
        return self._get_observations()

    def _get_observations(self):
        observations = []
        for pos in self.agent_positions:
            x, y = pos
            xmin = max(0, x - self.observation_range)
            xmax = min(self.grid_size, x + self.observation_range + 1)
            ymin = max(0, y - self.observation_range)
            ymax = min(self.grid_size, y + self.observation_range + 1)
            obs = self.signal_coverage[xmin:xmax, ymin:ymax]
            padded_obs = np.zeros((self.observation_range * 2 + 1, self.observation_range * 2 + 1))
            padded_obs[:obs.shape[0], :obs.shape[1]] = obs
            observations.append(padded_obs)
        return observations

    def step(self, actions):
        rewards = np.zeros(self.num_agents)
        for i, action in enumerate(actions):
            x, y = self.agent_positions[i]
            if action == 1 and x > 0:
                x -= 1
            elif action == 2 and x < self.grid_size - 1:
                x += 1
            elif action == 3 and y > 0:
                y -= 1
            elif action == 4 and y < self.grid_size - 1:
                y += 1
            self.agent_positions[i] = [x, y]
            self.signal_coverage[x, y] = min(1.0, self.signal_coverage[x, y] + 0.1)
            rewards[i] = self.signal_coverage[x, y]  # reward increases with coverage

        done = False
        return self._get_observations(), rewards, done, {}

    def render(self, mode='human'):
        grid = np.zeros((self.grid_size, self.grid_size))
        for pos in self.agent_positions:
            grid[pos[0], pos[1]] = 1
        print("Grid (Agents=1):")
        print(grid)
